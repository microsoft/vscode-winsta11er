steps:
  - task: UseDotNet@2
    inputs:
      version: 6.x

  - task: EsrpCodeSigning@5
    inputs:
      UseMSIAuthentication: true
      ConnectedServiceName: vscode-esrp
      AppRegistrationClientId: c24324f7-e65f-4c45-8702-ed2d4c35df99
      AppRegistrationTenantId: 975f013f-7f24-47e8-a7d3-abc4752bf346
      AuthAKVName: vscode-esrp
      AuthSignCertName: esrp-sign
      FolderPath: .
      Pattern: noop
    displayName: 'Install ESRP Tooling'

  - powershell: |
      $EsrpCodeSigningTool = (gci -directory -filter EsrpCodeSigning_* $(Agent.RootDirectory)\_tasks | Select-Object -last 1).FullName
      $Version = (gci -directory $EsrpCodeSigningTool | Select-Object -last 1).FullName
      echo "##vso[task.setvariable variable=EsrpCliDllPath]$Version/net6.0/esrpcli.dll"
    displayName: Find ESRP CLI

  - pwsh: |
      $content = @"
      "use strict";
      /*---------------------------------------------------------------------------------------------
      *  Copyright (c) Microsoft Corporation. All rights reserved.
      *  Licensed under the MIT License. See License.txt in the project root for license information.
      *--------------------------------------------------------------------------------------------*/
      const cp = require("child_process");
      const fs = require("fs");
      const path = require("path");
      const os = require("os");
      const crypto = require("crypto");

      function getParams(type) {
          switch (type) {
              case 'sign-windows':
                  return [
                      {
                          keyCode: 'CP-230012',
                          operationSetCode: 'SigntoolSign',
                          parameters: [
                              { parameterName: 'OpusName', parameterValue: 'VS Code' },
                              { parameterName: 'OpusInfo', parameterValue: 'https://code.visualstudio.com/' },
                              { parameterName: 'Append', parameterValue: '/as' },
                              { parameterName: 'FileDigest', parameterValue: '/fd "SHA256"' },
                              { parameterName: 'PageHash', parameterValue: '/NPH' },
                              { parameterName: 'TimeStamp', parameterValue: '/tr "http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer" /td sha256' }
                          ],
                          toolName: 'sign',
                          toolVersion: '1.0'
                      },
                      {
                          keyCode: 'CP-230012',
                          operationSetCode: 'SigntoolVerify',
                          parameters: [
                              { parameterName: 'VerifyAll', parameterValue: '/all' }
                          ],
                          toolName: 'sign',
                          toolVersion: '1.0'
                      }
                  ];
              case 'sign-windows-appx':
                  return [
                      {
                          keyCode: 'CP-229979',
                          operationSetCode: 'SigntoolSign',
                          parameters: [
                              { parameterName: 'OpusName', parameterValue: 'VS Code' },
                              { parameterName: 'OpusInfo', parameterValue: 'https://code.visualstudio.com/' },
                              { parameterName: 'FileDigest', parameterValue: '/fd "SHA256"' },
                              { parameterName: 'PageHash', parameterValue: '/NPH' },
                              { parameterName: 'TimeStamp', parameterValue: '/tr "http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer" /td sha256' }
                          ],
                          toolName: 'sign',
                          toolVersion: '1.0'
                      },
                      {
                          keyCode: 'CP-229979',
                          operationSetCode: 'SigntoolVerify',
                          parameters: [],
                          toolName: 'sign',
                          toolVersion: '1.0'
                      }
                  ];
              case 'sign-pgp':
                  return [{
                      keyCode: 'CP-450779-Pgp',
                      operationSetCode: 'LinuxSign',
                      parameters: [],
                      toolName: 'sign',
                      toolVersion: '1.0'
                  }];
              case 'sign-darwin':
                  return [{
                      keyCode: 'CP-401337-Apple',
                      operationSetCode: 'MacAppDeveloperSign',
                      parameters: [{ parameterName: 'Hardening', parameterValue: '--options=runtime' }],
                      toolName: 'sign',
                      toolVersion: '1.0'
                  }];
              case 'notarize-darwin':
                  return [{
                      keyCode: 'CP-401337-Apple',
                      operationSetCode: 'MacAppNotarize',
                      parameters: [],
                      toolName: 'sign',
                      toolVersion: '1.0'
                  }];
              case 'sign-vscode-extension':
                  return [{
                      keyCode: 'CP-401405',
                      operationSetCode: 'VSCodePublisherSign',
                      parameters: [],
                      toolName: 'sign',
                      toolVersion: '1.0'
                  }];
              default:
                  throw new Error('Sign type ' + type + ' not found');
          }
      }
      function main([esrpCliPath, type, folderPath, pattern]) {
          const root = path.join(os.tmpdir(), 'vsce-sign-' + Date.now());
          fs.mkdirSync(root);

          const key = crypto.randomBytes(32);
          const iv = crypto.randomBytes(16);
          const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
          const encryptedToken = cipher.update(process.env['SYSTEM_ACCESSTOKEN'].trim(), 'utf8', 'hex') + cipher.final('hex');
          
          const encryptionDetailsPath = path.join(root, 'encryptionDetails');
          fs.writeFileSync(encryptionDetailsPath, JSON.stringify({ key: key.toString('hex'), iv: iv.toString('hex') }));
          
          const encryptedTokenPath = path.join(root, 'encryptedToken');
          fs.writeFileSync(encryptedTokenPath, encryptedToken);

          const patternPath = path.join(root, 'pattern');
          fs.writeFileSync(patternPath, pattern);

          const paramsPath = path.join(root, 'params');
          fs.writeFileSync(paramsPath, JSON.stringify(getParams(type)));

          const dotnetVersion = cp.execSync('dotnet --version', { encoding: 'utf8' }).trim();
          const adoTaskVersion = path.basename(path.dirname(path.dirname(esrpCliPath)));
          const federatedTokenData = {
              jobId: process.env['SYSTEM_JOBID'],
              planId: process.env['SYSTEM_PLANID'],
              projectId: process.env['SYSTEM_TEAMPROJECTID'],
              hub: process.env['SYSTEM_HOSTTYPE'],
              uri: process.env['SYSTEM_COLLECTIONURI'],
              managedIdentityId: '4ac7ed59-b5e9-4f66-9c30-8d1afa72d32d', // VSCODE_ESRP_CLIENT_ID
              managedIdentityTenantId: '975f013f-7f24-47e8-a7d3-abc4752bf346', // VSCODE_ESRP_TENANT_ID
              serviceConnectionId: 'fe07e6ce-6ffb-4df9-8d27-d129523a3f3e', // VSCODE_ESRP_SERVICE_CONNECTION_ID
              tempDirectory: os.tmpdir(),
              systemAccessToken: encryptedTokenPath,
              encryptionKey: encryptionDetailsPath
          };
          const args = [
              esrpCliPath,
              'vsts.sign',
              '-a', 'c24324f7-e65f-4c45-8702-ed2d4c35df99', // ESRP_CLIENT_ID
              '-d', '975f013f-7f24-47e8-a7d3-abc4752bf346', // ESRP_TENANT_ID
              '-k', JSON.stringify({ akv: 'vscode-esrp' }),
              '-z', JSON.stringify({ akv: 'vscode-esrp', cert: 'esrp-sign' }),
              '-f', folderPath,
              '-p', patternPath,
              '-u', 'false',
              '-x', 'regularSigning',
              '-b', 'input.json',
              '-l', 'AzSecPack_PublisherPolicyProd.xml',
              '-y', 'inlineSignParams',
              '-j', paramsPath,
              '-c', '9997',
              '-t', '120',
              '-g', '10',
              '-v', 'Tls12',
              '-s', 'https://api.esrp.microsoft.com/api/v1',
              '-m', '0',
              '-o', 'Microsoft',
              '-i', 'https://www.microsoft.com',
              '-n', '5',
              '-r', 'true',
              '-w', dotnetVersion,
              '-skipAdoReportAttachment', 'false',
              '-pendingAnalysisWaitTimeoutMinutes', '5',
              '-adoTaskVersion', adoTaskVersion,
              '-resourceUri', 'https://msazurecloud.onmicrosoft.com/api.esrp.microsoft.com',
              '-esrpClientId', 'c24324f7-e65f-4c45-8702-ed2d4c35df99', // ESRP_CLIENT_ID
              '-useMSIAuthentication', 'true',
              '-federatedTokenData', JSON.stringify(federatedTokenData)
          ];

          try {
              cp.execFileSync('dotnet', args, { stdio: 'inherit' });
          } catch (err) {
              console.error('ESRP failed');
              console.error(err);
              process.exit(1);
          } finally {
              fs.rmdirSync(root, { recursive: true });
          }
      }

      main(process.argv.slice(2));
      "@
      $content | Out-File -FilePath $(Agent.TempDirectory)/sign.js -Encoding utf8
    workingDirectory: $(Build.BinariesDirectory)
    displayName: Setup Signing Script